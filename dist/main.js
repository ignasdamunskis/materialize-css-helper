(()=>{"use strict";function e(){let e=!1;try{const t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("testPassive",null,t),window.removeEventListener("testPassive",null,t)}catch(e){}return e}document.addEventListener("DOMContentLoaded",(()=>{const t={debug:!0,nonPassiveListeners:!0,selectOptions:!0,selectTriggers:!0,autocompletedInputLabels:!0,...window.materializeHelper||{}};var o;t.nonPassiveListeners&&function(t){const o=["touchstart","touchmove","touchend"];!function(t=null){const o=t||["scroll","wheel","touchstart","touchmove","touchenter","touchend","touchleave","mouseout","mouseleave","mouseup","mousedown","mousemove","mouseenter","mousewheel","mouseover"],n=EventTarget.prototype.addEventListener;EventTarget.prototype.addEventListener=function(...t){if(o.includes(t[0])&&(!t[2]||void 0===t[2].passive)){const o=t[1].toString(),[n,...s]=o.split("{"),c=n.replace(/(function|=>)/,"").trim(),i=s.join("{"),l=(c.match(/\(([^)]+)\)/)||[`(${c})`])[0].replace(/[()]/g,""),r=!(!l||!(i.includes("preventDefault()")||i.includes(`(${l})`)||i.includes(`(${l},`)||i.includes(`, ${l})`)));t[2]={...t[2]||{},...e()&&{passive:!r}}}n.call(this,...t)}}(o),t&&console.info("DEBUG: fixed non-passive event listeners",{events:o})}(t.debug),t.selectOptions&&function(t){let o=!1;const n=!!e()&&{passive:!0},s=document.querySelectorAll(".select-wrapper ul.select-dropdown li");s.length&&t&&console.info("DEBUG: fixed select options",{options:s});for(const e of s)e.addEventListener("touchmove",(()=>{o=!0}),n),e.addEventListener("touchstart",(()=>{o=!1}),n),e.addEventListener("touchend",(e=>{o||e.stopPropagation()}),n)}(t.debug),t.selectTriggers&&function(e){const t=document.querySelectorAll("input.select-dropdown.dropdown-trigger");for(const e of t){const t=e.closest(".select-wrapper").querySelector("select"),o=t.options[t.selectedIndex];e.placeholder=o.text}t.length&&e&&console.info("DEBUG: fixed select triggers",{triggers:t})}(t.debug),t.autocompletedInputLabels&&(o=t.debug,document.addEventListener("onautocomplete",(function(e){const t=e.target,n=t.parentNode.querySelector(`label[for="${t.id}"]`);t.hasAttribute("autocompleted")&&n&&(n.classList.add("active"),t.classList.add("valid"),o&&console.info("DEBUG: autocompleted input label",{input:t,label:n}))})))}))})();
(()=>{"use strict";function e(){let e=!1;try{const t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("testPassive",null,t),window.removeEventListener("testPassive",null,t)}catch(e){}return e}document.addEventListener("DOMContentLoaded",(()=>{!function(t){const o={debug:!0,nonPassiveListeners:!0,selectOptions:!0,selectTriggers:!0,autocompletedInputLabels:!0,...t};var n;o.nonPassiveListeners&&function(t){const o=["touchstart","touchmove","touchend"];(function(t=null){const o=t||["scroll","wheel","touchstart","touchmove","touchenter","touchend","touchleave","mouseout","mouseleave","mouseup","mousedown","mousemove","mouseenter","mousewheel","mouseover"],n=EventTarget.prototype.addEventListener;EventTarget.prototype.addEventListener=function(...t){if(o.includes(t[0])&&(!t[2]||void 0===t[2].passive)){const o=t[1].toString(),[n,...s]=o.split("{"),c=n.replace(/(function|=>)/,"").trim(),i=s.join("{"),l=(c.match(/\(([^)]+)\)/)||[`(${c})`])[0].replace(/[()]/g,""),r=!(!l||!(i.includes("preventDefault()")||i.includes(`(${l})`)||i.includes(`(${l},`)||i.includes(`, ${l})`)));t[2]={...t[2]||{},...e()&&{passive:!r}}}n.call(this,...t)}})(o),t&&console.info("DEBUG: fixed non-passive event listeners",{events:o})}(o.debug),o.selectOptions&&(n=o.debug,setTimeout((()=>{let t=!1;const o=!!e()&&{passive:!0},s=document.querySelectorAll(".select-wrapper ul.select-dropdown li");s.length&&n&&console.info("DEBUG: fixed select options",{options:s});for(const e of s)e.addEventListener("touchmove",(()=>{t=!0}),o),e.addEventListener("touchstart",(()=>{t=!1}),o),e.addEventListener("touchend",(e=>{t||e.stopPropagation()}),o)}),0)),o.selectTriggers&&function(e){setTimeout((()=>{const t=document.querySelectorAll("input.select-dropdown.dropdown-trigger");for(const e of t){const t=e.closest(".select-wrapper").querySelector("select"),o=t.options[t.selectedIndex];e.placeholder=o.text}t.length&&e&&console.info("DEBUG: fixed select triggers",{triggers:t})}),0)}(o.debug),o.autocompletedInputLabels&&function(e){document.addEventListener("onautocomplete",(function(t){const o=t.target,n=o.parentNode.querySelector(`label[for="${o.id}"]`);o.hasAttribute("autocompleted")&&n&&(n.classList.add("active"),o.classList.add("valid"),e&&console.info("DEBUG: autocompleted input label",{input:o,label:n}))}))}(o.debug)}(window.materializeHelper||{})}))})();